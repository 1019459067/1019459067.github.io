<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>上传Github的代码添加Cocoapods支持</title>
      <link href="/2019/03/24/%E4%B8%8A%E4%BC%A0Github%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0Cocoapods%E6%94%AF%E6%8C%81/"/>
      <url>/2019/03/24/%E4%B8%8A%E4%BC%A0Github%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0Cocoapods%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p>这里我将从最初的开始进行介绍，包括Github上创建项目已经上传项目，到最后的支持Cocoapods。这里主要以Objecte-C为例介绍。</p><h3 id="一、上传代码至GitHub"><a href="#一、上传代码至GitHub" class="headerlink" title="一、上传代码至GitHub"></a>一、上传代码至GitHub</h3><p>至于如何创建GitHub账号，请自行百度。</p><h5 id="1、首先我们打开github-com，然后创建自己的项目工程"><a href="#1、首先我们打开github-com，然后创建自己的项目工程" class="headerlink" title="1、首先我们打开github.com，然后创建自己的项目工程"></a>1、首先我们打开github.com，然后创建自己的项目工程</h5><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/001.jpg" alt><br>这里注意那个MIT License，在后面添加Cocoapods支持的时候会用到（稍后介绍）。</p><h5 id="2、点击创建仓库，然后将仓库clone到本地"><a href="#2、点击创建仓库，然后将仓库clone到本地" class="headerlink" title="2、点击创建仓库，然后将仓库clone到本地"></a>2、点击创建仓库，然后将仓库clone到本地</h5><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/002.jpg" alt></p><h5 id="3、将工程上传至仓库中"><a href="#3、将工程上传至仓库中" class="headerlink" title="3、将工程上传至仓库中"></a>3、将工程上传至仓库中</h5><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/003.jpg" alt></p><p>这里的LICENSE就是刚才说的MIT License添加的文件。CameraDemo是示例工程，WHCamera就是提供给他人使用的库。<br>然后提交到Github就可以了。</p><h3 id="二、创建podspec文件"><a href="#二、创建podspec文件" class="headerlink" title="二、创建podspec文件"></a>二、创建podspec文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="selector-tag">CameraDemo</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">pod</span> <span class="selector-tag">spec</span> <span class="selector-tag">create</span> <span class="selector-tag">WHCamera</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Specification</span> <span class="selector-tag">created</span> <span class="selector-tag">at</span> <span class="selector-tag">WHCamera</span><span class="selector-class">.podspec</span></span><br><span class="line">➜  <span class="selector-tag">CameraDemo</span> <span class="selector-tag">git</span><span class="selector-pseudo">:(master)</span> ✗ <span class="selector-tag">ls</span></span><br><span class="line"><span class="selector-tag">CameraDemo</span>           <span class="selector-tag">LICENSE</span>              <span class="selector-tag">WHCamera</span></span><br><span class="line"><span class="selector-tag">CameraDemo</span><span class="selector-class">.xcodeproj</span> <span class="selector-tag">README</span><span class="selector-class">.md</span>            <span class="selector-tag">WHCamera</span><span class="selector-class">.podspec</span></span><br></pre></td></tr></table></figure><p>此时在工程文件夹下也会多一个<code>WHCamera.podspec</code>文件。</p><h3 id="三、编辑podspec文件"><a href="#三、编辑podspec文件" class="headerlink" title="三、编辑podspec文件"></a>三、编辑podspec文件</h3><p>这里用Sublime Text打开并做了如下编辑。<a href="https://guides.cocoapods.org/syntax/podspec.html#specification" target="_blank" rel="noopener">关于podspec文件详解</a></p><p>这里我做的编辑更新如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.<span class="attr">name</span>         = <span class="string">"WHCamera"</span></span><br><span class="line">  s.<span class="attr">version</span>      = <span class="string">"0.0.1"</span></span><br><span class="line">  s.<span class="attr">summary</span>      = <span class="string">"A Library for iOS to use for Camera."</span></span><br><span class="line">  s.<span class="attr">description</span>  = &lt;&lt;-DESC</span><br><span class="line">                    <span class="string">"基于Object-C的iOS纯原生API相机，高度集成，使用快捷简单。可快速集成使用。最低支持iOS7的系统。"</span></span><br><span class="line">                   DESC</span><br><span class="line">  s.<span class="attr">platform</span>     = :ios, <span class="string">"7.0"</span></span><br><span class="line">  s.<span class="attr">homepage</span>     = <span class="string">"https://github.com/1019459067/CameraDemo"</span></span><br><span class="line">  s.<span class="attr">license</span>      = <span class="string">"MIT"</span></span><br><span class="line">  s.<span class="attr">author</span>       = &#123; <span class="string">"xiaoweihua"</span> =&gt; <span class="string">"1019459067@qq.com"</span> &#125;</span><br><span class="line">  s.<span class="attr">source</span>       = &#123; :<span class="attr">git</span> =&gt; <span class="string">"https://github.com/1019459067/CameraDemo.git"</span>, :<span class="attr">tag</span> =&gt; <span class="string">"#&#123;s.version&#125;"</span> &#125;</span><br><span class="line">  s.<span class="attr">source_files</span>  = <span class="string">"WHCamera/*.&#123;h,m&#125;"</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="四、验证podspec文件"><a href="#四、验证podspec文件" class="headerlink" title="四、验证podspec文件"></a>四、验证podspec文件</h3><p>接下来执行下面的命令进行验证：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  CameraDemo <span class="symbol">git:</span>(master) ✗ pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span> <span class="title">WHCamera</span>.<span class="title">podspec</span></span></span><br></pre></td></tr></table></figure><p>成功的结果如下：</p><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/004.jpg" alt></p><p>若失败则根据提示做对应修改，一开始我没有选定平台<code>s.platform = :ios, &quot;7.0&quot;</code>，所以一直报错。</p><h3 id="五、在Github上创建release版本"><a href="#五、在Github上创建release版本" class="headerlink" title="五、在Github上创建release版本"></a>五、在Github上创建release版本</h3><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/005.jpg" alt><br><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/006.jpg" alt><br><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/007.jpg" alt></p><h3 id="六、注册CocoaPods账号"><a href="#六、注册CocoaPods账号" class="headerlink" title="六、注册CocoaPods账号"></a>六、注册CocoaPods账号</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  CameraDemo git:(master) pod trunk register xxxxxx@qq.com <span class="string">'用户名'</span></span><br><span class="line">[!] Please verify the session <span class="keyword">by</span> clicking the link <span class="keyword">in</span> the verification email <span class="literal">that</span> has been sent <span class="keyword">to</span> xxxxxx@qq.com</span><br></pre></td></tr></table></figure><p>打开邮件中的链接, 这样就成功注册了Cocoapods账号。</p><p>检查是否创建成功的命令如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  CameraDemo gi<span class="variable">t:</span>(master) pod trunk <span class="keyword">me</span></span><br><span class="line">  - Name:     用户名</span><br><span class="line">  - Emai<span class="variable">l:</span>    xxxxxx@qq.<span class="keyword">com</span></span><br><span class="line">  - Since:    March <span class="number">24</span><span class="keyword">th</span>, <span class="number">08</span>:<span class="number">07</span></span><br><span class="line">  - Pod<span class="variable">s:</span>     None</span><br><span class="line">  - Session<span class="variable">s:</span></span><br><span class="line">    - March <span class="number">24</span><span class="keyword">th</span>, <span class="number">08</span>:<span class="number">07</span> - July <span class="number">30</span><span class="keyword">th</span>, <span class="number">08</span>:<span class="number">08</span>. IP: <span class="number">113.92</span>.<span class="number">152.160</span></span><br><span class="line">➜  CameraDemo gi<span class="variable">t:</span>(master)</span><br></pre></td></tr></table></figure><h3 id="七、上传代码到CocoaPods"><a href="#七、上传代码到CocoaPods" class="headerlink" title="七、上传代码到CocoaPods"></a>七、上传代码到CocoaPods</h3><p>首先检测文件格式的有效性：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  CameraDemo <span class="string">git:</span>(master) ✗ pod spec lint</span><br><span class="line"></span><br><span class="line"> -&gt; WHCamera (<span class="number">0.0</span><span class="number">.1</span>)</span><br><span class="line">    - NOTE  | <span class="string">xcodebuild:</span>  <span class="string">note:</span> Using <span class="keyword">new</span> build system</span><br><span class="line">    - NOTE  | [iOS] <span class="string">xcodebuild:</span>  <span class="string">note:</span> Planning build</span><br><span class="line">    - NOTE  | [iOS] <span class="string">xcodebuild:</span>  <span class="string">note:</span> Constructing build description</span><br><span class="line">    - NOTE  | [iOS] <span class="string">xcodebuild:</span>  <span class="string">warning:</span> Skipping code signing because the target does not have an Info.plist file. (<span class="keyword">in</span> target <span class="string">'App'</span>)</span><br><span class="line"></span><br><span class="line">Analyzed <span class="number">1</span> podspec.</span><br><span class="line"></span><br><span class="line">WHCamera.podspec passed validation.</span><br><span class="line"></span><br><span class="line">➜  CameraDemo <span class="string">git:</span>(master) ✗</span><br></pre></td></tr></table></figure><p>警告可以使用<code>--allow-warnings</code>忽略.</p><p>出现<code>passed validation</code>就说明通过验证了。然后执行：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk <span class="built_in">push</span> WHCamera.podspec --allow-<span class="built_in">warnings</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>成功的结果如下：<br><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/008.jpg" alt></p><p>好像这个地方需要等待很长时间～～～</p><h3 id="八、检查上传是否成功"><a href="#八、检查上传是否成功" class="headerlink" title="八、检查上传是否成功"></a>八、检查上传是否成功</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pod search WHCamera</span></span><br></pre></td></tr></table></figure><p>第一次搜索失败：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable <span class="keyword">to</span> <span class="built_in">find</span> a pod <span class="keyword">with</span> <span class="built_in">name</span>, author, summary, <span class="built_in">or</span> description matching `WHCamera`</span><br></pre></td></tr></table></figure><p>如果搜索不到，建议删除本地的CocoaPods的搜索目录，执行以下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  rm ~<span class="regexp">/Library/</span>Caches<span class="regexp">/CocoaPods/</span>search_index.json</span><br></pre></td></tr></table></figure><p><img src="/2019/03/24/上传Github的代码添加Cocoapods支持/009.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 基本技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Cocoapods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下使用免费实现内网穿透</title>
      <link href="/2019/01/27/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2019/01/27/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>MacOS Mojava(此条件非必须)</p><h1 id="二、ngrok"><a href="#二、ngrok" class="headerlink" title="二、ngrok"></a>二、<a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a></h1><p>下载地址：<a href="https://ngrok.com/download" target="_blank" rel="noopener">https://ngrok.com/download</a><br><img src="/2019/01/27/Mac下使用免费实现内网穿透/001.png" alt></p><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>1、下载之后直接解压得到 一个 ngrok 文件</p><p>2、直接终端运行<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ chmod <span class="keyword">a</span>+x ngrok</span><br></pre></td></tr></table></figure></p><p>即可修改权限。</p><p>3、开启服务<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ./ngrok http <span class="string">localhost:</span><span class="number">8080</span></span><br></pre></td></tr></table></figure></p><p>4、结果如下：<br><img src="/2019/01/27/Mac下使用免费实现内网穿透/002.png" alt></p><p>5、http、https服务器即可通过手机4G网络访问：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//8dfccac4.ngrok.io</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//8dfccac4.ngrok.io</span></span><br></pre></td></tr></table></figure></p><h1 id="四、问题"><a href="#四、问题" class="headerlink" title="四、问题"></a>四、问题</h1><p>需要主要的是！！！！➜ 必须开启web服务</p><p>若没开启出现如下错误：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Failed to complete tunnel connection**</span></span><br><span class="line"></span><br><span class="line">The connection to [<span class="string">**https://8dfccac4.ngrok.io**</span>](<span class="link">https://8dfccac4.ngrok.io/</span>) was successfully tunneled to your ngrok client, but the client failed to establish a connection to the local address [<span class="string">**localhost:8080**</span>](<span class="link">http://localhost:8080/</span>).</span><br><span class="line"></span><br><span class="line">Make sure that a web service is running on [<span class="string">**localhost:8080**</span>](<span class="link">http://localhost:8080/</span>) and that it is a valid address.</span><br><span class="line"></span><br><span class="line">The error encountered was: <span class="strong">**dial tcp**</span> [<span class="strong">**::1**</span>]<span class="strong">**:8080: getsockopt: connection refused**</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 基本技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发之基本算法</title>
      <link href="/2018/09/26/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/"/>
      <url>/2018/09/26/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="关于常有的算法罗列"><a href="#关于常有的算法罗列" class="headerlink" title="关于常有的算法罗列"></a>关于常有的算法罗列</h4><p><img src="/2018/09/26/iOS开发之基本算法/001.png" alt></p><h3 id="一、冒泡排序算法-Bubble-Sort"><a href="#一、冒泡排序算法-Bubble-Sort" class="headerlink" title="一、冒泡排序算法(Bubble Sort)"></a>一、冒泡排序算法(Bubble Sort)</h3><p>相邻元素进行比较，按照升序或者降序，交换两个相邻元素的位置，是一种“稳定排序算法”</p><h4 id="1、动图演示"><a href="#1、动图演示" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/002.gif" alt></p><h4 id="2、算法步骤"><a href="#2、算法步骤" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>3、针对所有的元素重复以上的步骤，除了最后一个。<br>4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></blockquote><h4 id="3、OC代码示例"><a href="#3、OC代码示例" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)bubbleSortWithArray:(NSMutableArray *)<span class="built_in">array</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">         <span class="comment">//外层for循环控制循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">array</span>.count - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">//内层for循环控制交换次数</span></span><br><span class="line">            <span class="keyword">if</span> ([<span class="built_in">array</span>[j] integerValue] &gt; [<span class="built_in">array</span>[j + <span class="number">1</span>] integerValue]) &#123;</span><br><span class="line">                [<span class="built_in">array</span> exchangeObjectAtIndex:j withObjectAtIndex:j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、算法特点"><a href="#4、算法特点" class="headerlink" title="4、算法特点"></a>4、算法特点</h4><p>当输入的数据已经是正序时，最快；</p><p>当输入的数据已经是反序时，最慢。</p><h3 id="二、快速排序算法-quick-sort"><a href="#二、快速排序算法-quick-sort" class="headerlink" title="二、快速排序算法(quick sort)"></a>二、快速排序算法(quick sort)</h3><h4 id="1、动图演示-1"><a href="#1、动图演示-1" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/003.gif" alt></p><h4 id="2、算法步骤-1"><a href="#2、算法步骤-1" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、从数列中挑出一个元素，称为 “基准”（pivot）；<br>2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br>3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p></blockquote><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><h4 id="3、OC代码示例-1"><a href="#3、OC代码示例-1" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">- (void)quickSortArray:(NSMutableArray *)<span class="keyword">array</span></span><br><span class="line">            leftIndex:(NSInteger)left</span><br><span class="line">           rightIndex:(NSInteger)right &#123;</span><br><span class="line">   <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   NSInteger i = left;</span><br><span class="line">   NSInteger j = right;</span><br><span class="line">   <span class="comment">//记录基准数 pivoty</span></span><br><span class="line">   NSInteger key = [<span class="keyword">array</span>[i] integerValue];</span><br><span class="line">   <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">       <span class="comment">//首先从右边j开始查找(从最右边往左找)比基准数(key)小的值&lt;---</span></span><br><span class="line">       <span class="keyword">while</span> (i &lt; j &amp;&amp; key &lt;= [<span class="keyword">array</span>[j] integerValue]) &#123;</span><br><span class="line">           j--;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果从右边j开始查找的值[array[j] integerValue]比基准数小，则将查找的小值调换到i的位置</span></span><br><span class="line">       <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">           <span class="keyword">array</span>[i] = <span class="keyword">array</span>[j];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//从i的右边往右查找到一个比基准数小的值时，就从i开始往后找比基准数大的值 ---&gt;</span></span><br><span class="line">       <span class="keyword">while</span> (i &lt; j &amp;&amp; [<span class="keyword">array</span>[i] integerValue] &lt;= key) &#123;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果从i的右边往右查找的值[array[i] integerValue]比基准数大，则将查找的大值调换到j的位置</span></span><br><span class="line">       <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">           <span class="keyword">array</span>[j] = <span class="keyword">array</span>[i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//将基准数放到正确的位置，----改变的是基准值的位置(数组下标)---</span></span><br><span class="line">   <span class="keyword">array</span>[i] = @(key);</span><br><span class="line">   <span class="comment">//递归排序</span></span><br><span class="line">   <span class="comment">//将i左边的数重新排序</span></span><br><span class="line">   [<span class="keyword">self</span> quickSortArray:<span class="keyword">array</span> leftIndex:left rightIndex:i - <span class="number">1</span>];</span><br><span class="line">   <span class="comment">//将i右边的数重新排序</span></span><br><span class="line">   [<span class="keyword">self</span> quickSortArray:<span class="keyword">array</span> leftIndex:i + <span class="number">1</span> rightIndex:right];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、选择排序算法-select-sort"><a href="#三、选择排序算法-select-sort" class="headerlink" title="三、选择排序算法(select sort)"></a>三、选择排序算法(select sort)</h3><p>它是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。</p><h4 id="选择排序算法一：-直接选择排序-straight-select-sort"><a href="#选择排序算法一：-直接选择排序-straight-select-sort" class="headerlink" title="选择排序算法一： 直接选择排序(straight select sort)"></a>选择排序算法一： 直接选择排序(straight select sort)</h4><h4 id="1、动图演示-2"><a href="#1、动图演示-2" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/004.gif" alt></p><h4 id="2、算法步骤-2"><a href="#2、算法步骤-2" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置<br>2、再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>3、重复第二步，直到所有元素均排序完毕。</p></blockquote><h4 id="3、OC代码示例-2"><a href="#3、OC代码示例-2" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)selectSortWithArray:(NSMutableArray *)array &#123;</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array.count; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="built_in">j</span> &lt; array.count; <span class="built_in">j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[<span class="built_in">i</span>] &gt; array[<span class="built_in">j</span>]) &#123;</span><br><span class="line">                [array exchangeObjectAtIndex:<span class="built_in">i</span> withObjectAtIndex:<span class="built_in">j</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序算法二：-堆排序-heap-sort-涉及到完全二叉树的概念"><a href="#选择排序算法二：-堆排序-heap-sort-涉及到完全二叉树的概念" class="headerlink" title="选择排序算法二： 堆排序(heap sort 涉及到完全二叉树的概念)"></a>选择排序算法二： 堆排序(heap sort 涉及到完全二叉树的概念)</h4><h4 id="1、动图演示-3"><a href="#1、动图演示-3" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/005.gif" alt></p><h4 id="2、算法步骤-3"><a href="#2、算法步骤-3" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、创建一个堆 H[0……n-1]；<br>2、把堆首（最大值）和堆尾互换；<br>3、把堆的尺寸缩小1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；<br>4、重复步骤2，直到堆的尺寸为 1。</p></blockquote><h4 id="3、OC代码示例-3"><a href="#3、OC代码示例-3" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)heapSortWithArray:(NSMutableArray *)<span class="keyword">array</span> &#123;</span><br><span class="line">    <span class="comment">//循环建立初始堆</span></span><br><span class="line">    <span class="built_in">for</span> (NSInteger i = <span class="keyword">array</span>.count * <span class="number">0.5</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        [self heapAdjustWithArray:<span class="keyword">array</span> parentIndex:i length:<span class="keyword">array</span>.count];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行n-1次循环，完成排序</span></span><br><span class="line">    <span class="built_in">for</span> (NSInteger j = <span class="keyword">array</span>.count - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="comment">//最后一个元素和第一个元素进行交换</span></span><br><span class="line">        [<span class="keyword">array</span> exchangeObjectAtIndex:j withObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//筛选R[0]结点，得到i-1个结点的堆</span></span><br><span class="line">        [self heapAdjustWithArray:<span class="keyword">array</span> parentIndex:<span class="number">0</span> length:j];</span><br><span class="line">        NSLog(@<span class="string">"第%ld趟:"</span>, <span class="keyword">array</span>.count - j);</span><br><span class="line">        [self printHeapSortResult:<span class="keyword">array</span> <span class="built_in">begin</span>:<span class="number">0</span> <span class="built_in">end</span>:<span class="keyword">array</span>.count - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)heapAdjustWithArray:(NSMutableArray *)<span class="keyword">array</span></span><br><span class="line">                parentIndex:(NSInteger)parentIndex</span><br><span class="line">                     length:(NSInteger)length &#123;</span><br><span class="line">    NSInteger temp = [<span class="keyword">array</span>[parentIndex] integerValue]; <span class="comment">//temp保存当前父结点</span></span><br><span class="line">    NSInteger child = <span class="number">2</span> * parentIndex + <span class="number">1</span>; <span class="comment">//先获得左孩子</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">while</span> (child &lt; length) &#123;</span><br><span class="line">        <span class="comment">//如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span></span><br><span class="line">        <span class="built_in">if</span> (child + <span class="number">1</span> &lt; length &amp;&amp; [<span class="keyword">array</span>[child] integerValue] &lt; [<span class="keyword">array</span>[child + <span class="number">1</span>] integerValue]) &#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果父结点的值已经大于孩子结点的值，则直接结束</span></span><br><span class="line">        <span class="built_in">if</span> (temp &gt;= [<span class="keyword">array</span>[child] integerValue]) &#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把孩子结点的值赋值给父结点</span></span><br><span class="line">        <span class="keyword">array</span>[parentIndex] = <span class="keyword">array</span>[child];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//选取孩子结点的左孩子结点，继续向下筛选</span></span><br><span class="line">        parentIndex = child;</span><br><span class="line">        child = <span class="number">2</span> * child + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">array</span>[parentIndex] = @(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printHeapSortResult:(NSMutableArray *)<span class="keyword">array</span></span><br><span class="line">                      <span class="built_in">begin</span>:(NSInteger)<span class="built_in">begin</span></span><br><span class="line">                        <span class="built_in">end</span>:(NSInteger)<span class="built_in">end</span> &#123;</span><br><span class="line">    <span class="built_in">for</span> (NSInteger i = <span class="number">0</span>; i &lt; <span class="built_in">begin</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">for</span> (NSInteger i = <span class="built_in">begin</span>; i &lt;= <span class="built_in">end</span>; i++) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印堆排序</span></span><br><span class="line">    NSLog(@<span class="string">"堆排序升序结果是---&gt;%@"</span>,<span class="keyword">array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、插入排序-insert-sort"><a href="#四、插入排序-insert-sort" class="headerlink" title="四、插入排序(insert sort)"></a>四、插入排序(insert sort)</h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p><h4 id="1、动图演示-4"><a href="#1、动图演示-4" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/006.gif" alt></p><h4 id="2、算法步骤-4"><a href="#2、算法步骤-4" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。<br>2、从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）</p></blockquote><h4 id="3、OC代码示例-4"><a href="#3、OC代码示例-4" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)insertSortWithArray:(NSMutableArray *)<span class="built_in">array</span> &#123;</span><br><span class="line">    NSInteger j;</span><br><span class="line">    <span class="keyword">for</span> (NSInteger i = <span class="number">1</span>; i &lt; <span class="built_in">array</span>.count; i++) &#123;</span><br><span class="line">        <span class="comment">//取出每一个待插入的数据，从array[1]开始查找</span></span><br><span class="line">        NSInteger temp = [<span class="built_in">array</span>[i] integerValue];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; [<span class="built_in">array</span>[j] integerValue]; j--) &#123;</span><br><span class="line">            <span class="comment">//如果之前的数比temp大，就将这个数往后移动一个位置，留出空来让temp插入，和整理扑克牌类似</span></span><br><span class="line">            [<span class="built_in">array</span>[j + <span class="number">1</span>]  integerValue] = [<span class="built_in">array</span>[j] integerValue]];</span><br><span class="line">            <span class="built_in">array</span>[j] = [NSNumber numberWithInteger:temp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、归并排序-merge-sort"><a href="#五、归并排序-merge-sort" class="headerlink" title="五、归并排序(merge sort)"></a>五、归并排序(merge sort)</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。007作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。<br>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><h4 id="1、动图演示-5"><a href="#1、动图演示-5" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/007.gif" alt></p><h4 id="2、算法步骤-5"><a href="#2、算法步骤-5" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h4><blockquote><p>1、申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；<br>2、设定两个指针，最初位置分别为两个已经排序序列的起始位置；<br>3、比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；<br>4、重复步骤 3 直到某一指针达到序列尾；<br>5、将另一序列剩下的所有元素直接复制到合并序列尾。</p></blockquote><h4 id="3、OC代码示例-5"><a href="#3、OC代码示例-5" class="headerlink" title="3、OC代码示例"></a>3、OC代码示例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自顶向下的归并排序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 递归使用归并排序,对array[left...right]的范围进行排序</span></span><br><span class="line"><span class="comment"> @param array 数组</span></span><br><span class="line"><span class="comment"> @param left 左边界</span></span><br><span class="line"><span class="comment"> @param right 右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (void)mergeSortWithArray:(<span class="type">NSMutableArray</span> *)array</span><br><span class="line">                      <span class="keyword">left</span>:(<span class="type">NSInteger</span>)<span class="keyword">left</span></span><br><span class="line">                     <span class="keyword">right</span>:(<span class="type">NSInteger</span>)<span class="keyword">right</span> &#123;</span><br><span class="line">    <span class="comment">//判断递归到底的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">left</span> &gt;= <span class="keyword">right</span>) &#123;</span><br><span class="line">        <span class="comment">//这时候只有一个元素或者是不存在的情况</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中间索引的位置</span></span><br><span class="line">    <span class="type">NSInteger</span> middle = (<span class="keyword">right</span> + <span class="keyword">left</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//对 left --- middle 区间的元素进行排序操作</span></span><br><span class="line">    [<span class="keyword">self</span> mergeSortWithArray:array <span class="keyword">left</span>:<span class="keyword">left</span> <span class="keyword">right</span>:middle];</span><br><span class="line">    <span class="comment">//对 middle + 1 ---- right 区间的元素进行排序操作</span></span><br><span class="line">    [<span class="keyword">self</span> mergeSortWithArray:array <span class="keyword">left</span>:middle + <span class="number">1</span> <span class="keyword">right</span>:<span class="keyword">right</span>];</span><br><span class="line">    <span class="comment">//两边排序完成后进行归并操作</span></span><br><span class="line">    [<span class="keyword">self</span> mergeSortWithArray:array <span class="keyword">left</span>:<span class="keyword">left</span> middle:middle <span class="keyword">right</span>:<span class="keyword">right</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 对 [left middle] 和 [middle + 1 right]这两个区间归并操作</span></span><br><span class="line"><span class="comment"> @param array 传入的数组</span></span><br><span class="line"><span class="comment"> @param left 左边界</span></span><br><span class="line"><span class="comment"> @param middle 中间位置</span></span><br><span class="line"><span class="comment"> @param right 右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (void)mergeSortWithArray:(<span class="type">NSMutableArray</span> *)array</span><br><span class="line">                      <span class="keyword">left</span>:(<span class="type">NSInteger</span>)<span class="keyword">left</span></span><br><span class="line">                    middle:(<span class="type">NSInteger</span>)middle</span><br><span class="line">                     <span class="keyword">right</span>:(<span class="type">NSInteger</span>)<span class="keyword">right</span> &#123;</span><br><span class="line">    <span class="comment">//拷贝一个数组出来</span></span><br><span class="line">    <span class="type">NSMutableArray</span> *copyArray = [<span class="type">NSMutableArray</span> arrayWithCapacity:<span class="keyword">right</span> - <span class="keyword">left</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSInteger</span> i = <span class="keyword">left</span>; i &lt;= <span class="keyword">right</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//这里要注意有left的偏移量，所以copyArray赋值的时候要减去left</span></span><br><span class="line">        copyArray[i - <span class="keyword">left</span>] = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSInteger</span> i = <span class="keyword">left</span>, j = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//循环从left开始到right区间内给数组重新赋值，注意赋值的时候也是从left开始的，不要习惯写成了从0开始，还有都是闭区间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSInteger</span> k = <span class="keyword">left</span>; k &lt;= <span class="keyword">right</span>; k++) &#123;</span><br><span class="line">        <span class="comment">//当左边界超过中间点时 说明左半部分数组越界了 直接取右边部分的数组的第一个元素即可</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; middle) &#123;</span><br><span class="line">            <span class="comment">//给数组赋值 注意偏移量left 因为这里是从left开始的</span></span><br><span class="line">            array[k] = copyArray[j - <span class="keyword">left</span>];</span><br><span class="line">            <span class="comment">//索引++</span></span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="keyword">right</span>) &#123;<span class="comment">//当j大于右边的边界时证明有半部分数组越界了，直接取左半部分的第一个元素即可</span></span><br><span class="line">            array[k] = copyArray[i - <span class="keyword">left</span>];</span><br><span class="line">            <span class="comment">//索引++</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copyArray[i - <span class="keyword">left</span>] &gt; copyArray[j - <span class="keyword">left</span>]) &#123;<span class="comment">//左右两半部分数组比较</span></span><br><span class="line">            <span class="comment">//当右半部分数组的第一个元素要小时 给数组赋值为右半部分的第一个元素</span></span><br><span class="line">            array[k] = copyArray[j - <span class="keyword">left</span>];</span><br><span class="line">            <span class="comment">//右半部分索引加1</span></span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//右半部分数组首元素大于左半部分数组首元素</span></span><br><span class="line">            array[k] = copyArray[i - <span class="keyword">left</span>];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、希尔排序-shell-sort"><a href="#六、希尔排序-shell-sort" class="headerlink" title="六、希尔排序(shell sort)"></a>六、希尔排序(shell sort)</h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h4 id="1、算法步骤"><a href="#1、算法步骤" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><blockquote><p>1、选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</p><p>2、按增量序列个数 k，对序列进行 k 趟排序；</p><p>3、每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p></blockquote><h4 id="2、OC代码示例"><a href="#2、OC代码示例" class="headerlink" title="2、OC代码示例"></a>2、OC代码示例</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)shellAscendingOrderSort:(<span class="built_in">NSMutableArray</span> *)ascendingArr &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *buckt = [<span class="keyword">self</span> createBucket];</span><br><span class="line">    <span class="built_in">NSNumber</span> *maxnumber = [<span class="keyword">self</span> listMaxItem:ascendingArr];</span><br><span class="line">    <span class="built_in">NSInteger</span> maxLength = numberLength(maxnumber);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> digit = <span class="number">1</span>; digit &lt;= maxLength; digit++) &#123;</span><br><span class="line">        <span class="comment">// 入桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *item <span class="keyword">in</span> ascendingArr) &#123;</span><br><span class="line">            <span class="built_in">NSInteger</span> baseNumber = [<span class="keyword">self</span> fetchBaseNumber:item digit:digit];</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *mutArray = buckt[baseNumber];</span><br><span class="line">            [mutArray addObject:item];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSInteger</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckt.count; i++) &#123;</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *array = buckt[i];</span><br><span class="line">            <span class="keyword">while</span> (array.count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">NSNumber</span> *number = [array objectAtIndex:<span class="number">0</span>];</span><br><span class="line">                ascendingArr[index] = number;</span><br><span class="line">                [array removeObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"希尔升序排序结果：%@"</span>, ascendingArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)createBucket &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *bucket = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        [bucket addObject:array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bucket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)listMaxItem:(<span class="built_in">NSArray</span> *)list &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *maxNumber = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *number <span class="keyword">in</span> list) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([maxNumber integerValue] &lt; [number integerValue]) &#123;</span><br><span class="line">            maxNumber = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSInteger</span> numberLength(<span class="built_in">NSNumber</span> *number) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>, (<span class="keyword">long</span>)[number integerValue]];</span><br><span class="line">    <span class="keyword">return</span> string.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)fetchBaseNumber:(<span class="built_in">NSNumber</span> *)number digit:(<span class="built_in">NSInteger</span>)digit &#123;</span><br><span class="line">    <span class="keyword">if</span> (digit &gt; <span class="number">0</span> &amp;&amp; digit &lt;= numberLength(number)) &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *numbersArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="built_in">NSString</span> *string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>, [number integerValue]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberLength(number); index++) &#123;</span><br><span class="line">            [numbersArray addObject:[string substringWithRange:<span class="built_in">NSMakeRange</span>(index, <span class="number">1</span>)]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSString</span> *str = numbersArray[numbersArray.count - digit];</span><br><span class="line">        <span class="keyword">return</span> [str integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、基数排序-radix-sort"><a href="#七、基数排序-radix-sort" class="headerlink" title="七、基数排序(radix sort)"></a>七、基数排序(radix sort)</h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h4 id="基数排序-vs-计数排序-vs-桶排序"><a href="#基数排序-vs-计数排序-vs-桶排序" class="headerlink" title="基数排序 vs 计数排序 vs 桶排序"></a>基数排序 vs 计数排序 vs 桶排序</h4><p>基数排序有两种方法：</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li></ul><h4 id="1、动图演示-6"><a href="#1、动图演示-6" class="headerlink" title="1、动图演示"></a>1、动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/008.gif" alt></p><h4 id="2、OC代码示例-1"><a href="#2、OC代码示例-1" class="headerlink" title="2、OC代码示例"></a>2、OC代码示例</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)radixAscendingOrderSort:(<span class="built_in">NSMutableArray</span> *)ascendingArr &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *buckt = [<span class="keyword">self</span> createBucket];</span><br><span class="line">    <span class="built_in">NSNumber</span> *maxnumber = [<span class="keyword">self</span> listMaxItem:ascendingArr];</span><br><span class="line">    <span class="built_in">NSInteger</span> maxLength = numberLength(maxnumber);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> digit = <span class="number">1</span>; digit &lt;= maxLength; digit++) &#123;</span><br><span class="line">        <span class="comment">// 入桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *item <span class="keyword">in</span> ascendingArr) &#123;</span><br><span class="line">            <span class="built_in">NSInteger</span> baseNumber = [<span class="keyword">self</span> fetchBaseNumber:item digit:digit];</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *mutArray = buckt[baseNumber];</span><br><span class="line">            [mutArray addObject:item];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSInteger</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckt.count; i++) &#123;</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *array = buckt[i];</span><br><span class="line">            <span class="keyword">while</span> (array.count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">NSNumber</span> *number = [array objectAtIndex:<span class="number">0</span>];</span><br><span class="line">                ascendingArr[index] = number;</span><br><span class="line">                [array removeObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"基数升序排序结果：%@"</span>, ascendingArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、计数排序-counting-sort"><a href="#八、计数排序-counting-sort" class="headerlink" title="八、计数排序(counting sort)"></a>八、计数排序(counting sort)</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h4 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="/2018/09/26/iOS开发之基本算法/009.gif" alt></p><h3 id="九、桶排序-bucket-sort"><a href="#九、桶排序-bucket-sort" class="headerlink" title="九、桶排序(bucket sort)"></a>九、桶排序(bucket sort)</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ul><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ul><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><h4 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h4><p>当输入的数据可以均匀的分配到每一个桶中，最快；</p><p>当输入的数据被分配到了同一个桶中，最慢。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>（<a href="https://www.jianshu.com/p/77ba54a46ad7" target="_blank" rel="noopener">此篇文章主要是学习转载</a>）更多精彩细节，请查看收集的算法视频～～～</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1OA4Edl99wyL6cxwN97w8FA" target="_blank" rel="noopener">https://pan.baidu.com/s/1OA4Edl99wyL6cxwN97w8FA </a><br>提取码: yvty </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 基本算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS FFmpeg学习资料总结</title>
      <link href="/2018/08/16/iOS-FFmpeg%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/16/iOS-FFmpeg%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>目标：安装ffmpeg-3.4.2（这里根据脚本自动安装的，可能不是目前最新版，需要的请自行更改脚步）</p><p>推荐一个非常好用的编译<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script" target="_blank" rel="noopener">FFmpeg脚本</a>.</p><p>在终端cd到刚才下载的脚本，执行<code>./build-ffmpeg.sh</code>,如果你没安装Yasm不用担心，脚本会提示你，你只需要按照提示，脚本会自动帮你下载（这一步网上很多说要自己先安装，反正我是没有，按照脚本提示一步到位），可谓是一键式编译。</p><p>等待大概十几分钟。。。输出结果如下：</p><p>验证编译结果如下：</p><p><img src="/2018/08/16/iOS-FFmpeg学习资料总结/001.png" alt></p><p>在终端cd到FFmpeg-iOS里面的lib文件:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libavfilter.<span class="keyword">a</span></span><br><span class="line">Architectures <span class="keyword">in</span> <span class="keyword">the</span> fat <span class="built_in">file</span>: libavfilter.<span class="keyword">a</span> are: armv7 i386 x86_64 arm64</span><br></pre></td></tr></table></figure><p>说明：<br><code>armv7</code> <code>arm64</code> <code>i386</code> <code>x86_64</code>这些是什么，其实这些是处理器的指令集。</p><ul><li><code>armv7</code>、<code>arm64</code>是ARM处理器的指令集，真机所支持的架构。目前iOS主要支持<code>arm64</code>.</li><li><code>i386</code> 、<code>x86_64</code>是Mac系统处理器指令集，模拟器32位、64所支持的架构。</li></ul><h2 id="二、验证安装"><a href="#二、验证安装" class="headerlink" title="二、验证安装"></a>二、验证安装</h2><h3 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h3><p>Xcode：Version 9.4.1</p><p>MacOS High Sierra：Version 10.13.6</p><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>新建Xcode工程命名FFmpegDemo，上面编译好的FFmpeg-iOS添加到工程里面。</p><p>a、设置头文件路径，<code>Header Search Paths</code>-&gt;<code>$(SRCROOT)/FFmpeg-iOS/include</code><br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/002.png" alt><br>b、设置库文件路径，<code>Library Search Paths</code>-&gt;<code>$(PROJECT_DIR)/FFmpeg-iOS/lib</code><br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/003.png" alt><br>c、配置缺失的库，主要包括<code>CoreMedia.framework</code>、<code>AudioToolbox.framework</code>、<code>VideoToolbox.framework</code>、<code>libiconv.tbd</code>、<code>libbz2.tbd、libz.tbd</code>。<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/004.png" alt><br>完成后结果分别如下：</p><h3 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h3><p>在<code>ViewController.m</code>中输入如下代码进行验证：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#include <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"%s"</span>,avcodec_configuration());</span><br><span class="line">    <span class="built_in">UILabel</span> *lab = [<span class="built_in">UILabel</span> new];</span><br><span class="line">    lab.text = [<span class="built_in">NSString</span> stringWithUTF8String:avcodec_configuration()];</span><br><span class="line">    lab.numberOfLines = <span class="number">0</span>;</span><br><span class="line">    lab.frame = <span class="keyword">self</span>.view.bounds;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:lab];</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动运行程序，结果如下，说明配置成功。</p><p><img src="/2018/08/16/iOS-FFmpeg学习资料总结/005.png" alt></p><h2 id="三、视频播放器原理"><a href="#三、视频播放器原理" class="headerlink" title="三、视频播放器原理"></a>三、视频播放器原理</h2><p>这里主要参考<a href="https://www.jianshu.com/p/e4ab6fcc7742" target="_blank" rel="noopener">视频播放器原理及相关基础知识介绍</a>。</p><p>播放一个视频文件的流程如下：<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/006.png" alt></p><h4 id="1、封装格式的作用："><a href="#1、封装格式的作用：" class="headerlink" title="1、封装格式的作用："></a>1、封装格式的作用：</h4><p>视频码流和音频码流按照一定的格式存储在一个文件中。</p><p>MPEG2-TS和FLV格式简介：<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/007.png" alt></p><h4 id="2、封装格式："><a href="#2、封装格式：" class="headerlink" title="2、封装格式："></a>2、封装格式：</h4><p><img src="/2018/08/16/iOS-FFmpeg学习资料总结/008.png" alt></p><h4 id="3、H264格式简介以及压缩方法"><a href="#3、H264格式简介以及压缩方法" class="headerlink" title="3、H264格式简介以及压缩方法"></a>3、H264格式简介以及压缩方法</h4><ul><li>I:红色的帧，当作图片直接压缩。特点：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;</span><br><span class="line"><span class="number">2.</span>解码时仅用I帧的数据就可重构完整图像;</span><br><span class="line"><span class="number">3.</span>I帧描述了图像背景和运动主体的详情;</span><br><span class="line"><span class="number">4.</span>I帧不需要参考其他画面而生成;</span><br><span class="line"><span class="number">5.</span>I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);</span><br><span class="line"><span class="number">6.</span>I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;</span><br><span class="line"><span class="number">7.</span>I帧不需要考虑运动矢量;</span><br><span class="line"><span class="number">8.</span>I帧所占数据的信息量比较大。</span><br></pre></td></tr></table></figure><ul><li>P:蓝色的帧。以I帧为参考帧。前向预测编码帧。</li></ul><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="keyword">P</span>帧是I帧后面相隔<span class="number">1</span>~<span class="number">2</span>帧的编码帧;</span><br><span class="line"><span class="number">2</span>.<span class="keyword">P</span>帧采用运动补偿的方法传送它与前面的I或<span class="keyword">P</span>帧的差值及运动矢量(预测误差);</span><br><span class="line"><span class="number">3</span>.解码时必须将I帧中的预测值与预测误差求和后才能重构完整的<span class="keyword">P</span>帧图像;</span><br><span class="line"><span class="number">4</span>.<span class="keyword">P</span>帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或<span class="keyword">P</span>帧;</span><br><span class="line"><span class="number">5</span>.<span class="keyword">P</span>帧可以是其后面<span class="keyword">P</span>帧的参考帧,也可以是其前后的B帧的参考帧;</span><br><span class="line"><span class="number">6</span>.由于<span class="keyword">P</span>帧是参考帧,它可能造成解码错误的扩散;</span><br><span class="line"><span class="number">7</span>.由于是差值传送,<span class="keyword">P</span>帧的压缩比较高。</span><br></pre></td></tr></table></figure><ul><li>B:绿色的帧.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1<span class="selector-class">.B</span>帧是由前面的<span class="selector-tag">I</span>或<span class="selector-tag">P</span>帧和后面的<span class="selector-tag">P</span>帧来进行预测的;</span><br><span class="line">2<span class="selector-class">.B</span>帧传送的是它与前面的<span class="selector-tag">I</span>或<span class="selector-tag">P</span>帧和后面的<span class="selector-tag">P</span>帧之间的预测误差及运动矢量;</span><br><span class="line">3<span class="selector-class">.B</span>帧是双向预测编码帧;</span><br><span class="line">4<span class="selector-class">.B</span>帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;</span><br><span class="line">5<span class="selector-class">.B</span>帧不是参考帧,不会造成解码错误的扩散。</span><br></pre></td></tr></table></figure><h2 id="四、音频编码数据"><a href="#四、音频编码数据" class="headerlink" title="四、音频编码数据"></a>四、音频编码数据</h2><h4 id="1、音频编码的作用。"><a href="#1、音频编码的作用。" class="headerlink" title="1、音频编码的作用。"></a>1、音频编码的作用。</h4><p>将音频采集数据压缩成为音频码流，从而降低音频的数据量。</p><h4 id="2、音频格式"><a href="#2、音频格式" class="headerlink" title="2、音频格式"></a>2、音频格式</h4><p><img src="/2018/08/16/iOS-FFmpeg学习资料总结/009.png" alt></p><h4 id="3、ACC格式简介以及简介"><a href="#3、ACC格式简介以及简介" class="headerlink" title="3、ACC格式简介以及简介"></a>3、ACC格式简介以及简介</h4><p>数据由大小不固定的ADTS构成.压缩方法复杂，可以将音频数据压缩10倍以上.</p><h2 id="五、视频像素数据"><a href="#五、视频像素数据" class="headerlink" title="五、视频像素数据"></a>五、视频像素数据</h2><p>1、视频像素数据作用</p><p>保存了屏幕上每个像素点的像素值.</p><p>2、格式</p><p>RGB24、RGB32、YUV420P、YUV422P、YUV444P。常用的为YUV420P。</p><p>3、特点</p><p>体积很大。一般情况1小时高清视频的RGB24格式的数据体积为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3600</span>*<span class="number">25</span>*<span class="number">1920</span>*<span class="number">1080</span>*<span class="number">3</span>=<span class="number">559</span>GByte</span><br></pre></td></tr></table></figure><p>PS:这里帧率为25Hz，取样精度8bit.</p><p>4、RGB格式简介</p><p><img src="/2018/08/16/iOS-FFmpeg学习资料总结/010.png" alt></p><p>5、YUV格式简介<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/011.png" alt></p><h2 id="六、音频采样数据"><a href="#六、音频采样数据" class="headerlink" title="六、音频采样数据"></a>六、音频采样数据</h2><p>1、音频采样数据作用</p><p>保存了音频中每个采样点的值。</p><p>2、特点</p><p>体积很大。一般情况一首4分钟的PCM格式的歌曲体积为：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>*<span class="number">60</span>*<span class="number">44100</span>*<span class="number">2</span>*<span class="number">2</span>=<span class="number">42.3</span>MByte</span><br></pre></td></tr></table></figure><p>PS:假定采样率为44100Hz，采样精度为16bit.</p><h2 id="七、视频解码知识"><a href="#七、视频解码知识" class="headerlink" title="七、视频解码知识"></a>七、视频解码知识</h2><p>1、纯净的视频解码流程</p><ul><li>压缩编码数据-&gt;像素数据</li><li>例如解码H.264，就是“H.264-&gt;YUV”</li></ul><p>2、一般的视频解码流程</p><ul><li>视频码流一般存储在一定的封装格式中。封装格式中通常还包含音频码流等内容。</li><li>对于封装格式中的视频，需要先从封装的格式中的提取视频码流，然后在进行解码。</li><li>例如解码MKV格式的视频文件，就是“MKV-&gt;H.264码流-&gt;YUV”。</li></ul><h2 id="八、FFmpeg解码的函数"><a href="#八、FFmpeg解码的函数" class="headerlink" title="八、FFmpeg解码的函数"></a>八、FFmpeg解码的函数</h2><p>1、FFmpeg解码的流程图如下所示：<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/012.png" alt></p><p>2、FFmpeg解码函数简介<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/013.png" alt></p><p>3、FFmpeg解码的数据结构<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/014.png" alt></p><p>4、FFmpeg数据结构分析<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/015.png" alt><br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/016.png" alt><br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/017.png" alt></p><p>5、解码后的数据为什么要经过sws_scale()函数处理？<br><img src="/2018/08/16/iOS-FFmpeg学习资料总结/018.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS逆向之移除Oplayer lite广告</title>
      <link href="/2018/08/06/iOS%E9%80%86%E5%90%91%E4%B9%8B%E7%A7%BB%E9%99%A4Oplayer-lite%E5%B9%BF%E5%91%8A/"/>
      <url>/2018/08/06/iOS%E9%80%86%E5%90%91%E4%B9%8B%E7%A7%BB%E9%99%A4Oplayer-lite%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境要求："><a href="#一、环境要求：" class="headerlink" title="一、环境要求："></a>一、环境要求：</h3><p>1、iPod touch6: iOS10.3.1(已经越狱)</p><p>2、Xcode安装<a href="https://github.com/AloneMonkey/MonkeyDev/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">MonkeyDev</a></p><p>3、OPlayer Lite.ipa(Window PP助手获取)【非必须】</p><h3 id="二、lldb调试定位"><a href="#二、lldb调试定位" class="headerlink" title="二、lldb调试定位"></a>二、lldb调试定位</h3><p>1、直接在app store上下载Oplayer lite播放神器，为了方便调试，最好将设备设置成语言英文，后面会用到！</p><p>2、通过ssh连接越狱设备</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@<span class="keyword">172</span>.<span class="keyword">20</span>.<span class="keyword">134</span>.<span class="keyword">8</span></span><br></pre></td></tr></table></figure><p>3、关闭设备上的其他进程，最好只保留Oplayer lite，通过以下命令获取设备上所有运行的进程，只查看目标进程：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iPod:~ root<span class="comment"># ps aux | grep OPlayer</span></span><br><span class="line">mobile   <span class="number"> 6593 </span>  3.6  6.5 <span class="number"> 1384832 </span><span class="number"> 66024 </span>  ??  Ss    5:27PM   0:20.84 /var/containers/Bundle/Application/AAAB1B0F-A9A6-455C-BE5B-8E0230A75252/OPlayer Lite.app/OPlayer Lite</span><br><span class="line">root     <span class="number"> 6607 </span>  0.0  0.0  <span class="number"> 624224 </span>    <span class="number"> 8 </span>s000  R+    5:29PM   0:00.00 grep OPlayer</span><br></pre></td></tr></table></figure><p>4、根据教程<a href="https://www.jianshu.com/p/c3becee8d7d4" target="_blank" rel="noopener">iOS10.3.1 砸壳之路</a>使用两种方式进行应用砸壳,这里笔者就不详述了。</p><p>笔者通过第一种静态方式结果如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">iPod:~ root# Clutch -i</span><br><span class="line">Installed apps:</span><br><span class="line">1:   快拍 - Snapchat &lt;com.toyopagroup.picaboo&gt;</span><br><span class="line">2:   优酷视频-世界杯赛事全程高清直播 &lt;com.youku.YouKu&gt;</span><br><span class="line">3:   央视影音 &lt;cn.vuclip.mobiletv&gt;</span><br><span class="line">4:   A4 Player &lt;com.pd.A4Player&gt;</span><br><span class="line">5:   可可英语-英语听力口语训练神器 &lt;com.kekenet.kkyy&gt;</span><br><span class="line">6:   VPN Plus Privacy Protector &lt;vpn.free.proxy.FreeVPN-Plus&gt;</span><br><span class="line">7:   搜狐视频-法医秦明1、2两季独家连播 &lt;com.sohu.iPhoneVideo&gt;</span><br><span class="line">8:   微博 &lt;com.sina.weibo&gt;</span><br><span class="line">9:   腾讯视频 &lt;com.tencent.live4iphone&gt;</span><br><span class="line">10:  Shazam 音乐神搜 &lt;com.shazam.Shazam&gt;</span><br><span class="line">11:  OPlayer Lite - media player &lt;com.olimsoft.oplayer.lite&gt;</span><br><span class="line">12:  VPN - Super Unlimited Proxy &lt;mobi.mobilejump.freevpn&gt;</span><br><span class="line">13:  天天快报 - 腾讯兴趣阅读平台 &lt;com.tencent.reading&gt;</span><br><span class="line">iPod:~ root# Clutch -d 11</span><br><span class="line">Zipping OPlayer Lite.app</span><br><span class="line"><span class="keyword">Error: </span>Could not obtain mach port, either the process is dead (codesign error?) or entitlements were not properly signed!</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error: </span>Failed to dump &lt;OPlayer WatchKit Extension&gt; with arch arm64</span><br><span class="line"></span><br><span class="line">2018<span class="string">-08</span><span class="string">-06</span> 17:36:20.796 Clutch[6610:278690] failed operation :(</span><br><span class="line">2018<span class="string">-08</span><span class="string">-06</span> 17:36:20.796 Clutch[6610:278690] application &lt;NSOperationQueue: 0x1004be080&gt;&#123;name = 'NSOperationQueue 0x1004be080'&#125;</span><br><span class="line"><span class="keyword">Error: </span>Failed to dump &lt;OPlayer WatchKit Extension&gt;</span><br><span class="line"></span><br><span class="line">2018<span class="string">-08</span><span class="string">-06</span> 17:36:20.797 Clutch[6610:278690] failed operation :(</span><br><span class="line">2018<span class="string">-08</span><span class="string">-06</span> 17:36:20.797 Clutch[6610:278690] application &lt;NSOperationQueue: 0x1004be080&gt;&#123;name = 'NSOperationQueue 0x1004be080'&#125;</span><br><span class="line">ASLR slide: 0x100020000</span><br><span class="line">Dumping &lt;OPlayer Lite&gt; (arm64)</span><br><span class="line">Patched cryptid (64bit segment)</span><br><span class="line">Writing new checksum</span><br><span class="line">Zipping OPlayer WatchKit Extension.appex</span><br><span class="line">FAILED: &lt;OPlayer Lite bundleID: com.olimsoft.oplayer.lite&gt;</span><br><span class="line">Finished dumping com.olimsoft.oplayer.lite in 20.9 seconds</span><br></pre></td></tr></table></figure><p>很遗憾失败了，其原因自行百度。。。</p><p>所以最好通过动态砸壳来解决，若是大佬能通过Clutch方式解决，请私信me!!!</p><p>5、查看广告存在的位置</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">iPod:~ root<span class="comment"># cycript -p 6593          </span></span><br><span class="line">cy<span class="comment"># [[UIApp keyWindow] recursiveDescription].toString()</span></span><br><span class="line"></span><br><span class="line">`<span class="variable">&lt;UIWindow: 0x102661a40; frame = (0 0; 320 568); opaque = NO; autoresize = RM+BM; gestureRecognizers = &lt;NSArray: 0x17024f540&gt;</span>; layer = <span class="variable">&lt;UIWindowLayer: 0x170229900&gt;</span>&gt;</span><br><span class="line">   |<span class="string"> &lt;UITransitionView: 0x10d4e6eb0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x170634b40&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string"> &lt;UIView: 0x10d43e5f0; frame = (0 0; 320 568); autoresize = W+H; autoresizesSubviews = NO; layer = &lt;CALayer: 0x17042f420&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIView: 0x10d405740; frame = (0 0; 320 568); layer = &lt;CALayer: 0x17042f620&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;PlayerView: 0x10d43d560; frame = (0 0; 320 568); layer = &lt;CAEAGLLayer: 0x17042f680&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;AVPlayerDemoPlaybackView: 0x10d400320; frame = (0 0; 320 568); layer = &lt;AVPlayerLayer: 0x170633d20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;AVPlayerLayerIntermediateLayer: 0x1706344e0&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FigVideoContainerLayer: 0x1704578b0&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FigVideoLayer: 0x17065cf80&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FigSubtitleCALayer: 0x170457c40&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;AVPlayerLayerIntermediateLayer: 0x170628300&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;SubtitleLabel: 0x1026f95d0; baseClass = UILabel; frame = (0 0; 320 40); text = ''; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x170291120&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d4025d0; frame = (0 62; 320 20); text = 'IMG_4758.MOV'; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x170290360&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d410650; frame = (0 52; 320 50); text = ''; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17029e6e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIView: 0x1027b8070; frame = (0 0; 320 50); layer = &lt;CALayer: 0x174229e20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x102734a50; frame = (0 0; 320 50); opaque = NO; layer = &lt;CALayer: 0x174229dc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d435250; frame = (0 0; 320 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635e80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10271ed60; frame = (60 0; 260 50); text = 'Buy the full version to r...'; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x174283fc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;RoundedRectView: 0x10265a540; frame = (0 0; 320 64); layer = &lt;CALayer: 0x170429de0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;PlaySeekView: 0x10d40c050; frame = (39 22; 242 32); layer = &lt;CALayer: 0x170427700&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d452980; frame = (0 3; 60 25); text = '00:00:03'; userInteractionEnabled = NO; tag = 10000; layer = &lt;_UILabelLayer: 0x170292110&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;OBSlider: 0x10267c790; baseClass = UISlider; frame = (60 5; 118 22); opaque = NO; tag = 10002; layer = &lt;CALayer: 0x170427000&gt;; value: 3.000000&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIView: 0x10d42e1e0; frame = (39 7; 77 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635c80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d421cd0; frame = (-37 0; 114 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635cc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d429350; frame = (2 7; 37 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635d20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102692290; frame = (24 -4; 30 30); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635d80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d425830; frame = (178 3; 64 25); text = '-00:00:07'; userInteractionEnabled = NO; tag = 10001; layer = &lt;_UILabelLayer: 0x17028d9d0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d404790; frame = (258 6; 58 50); opaque = NO; layer = &lt;CALayer: 0x1704351c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4192a0; frame = (0 6; 58 54); opaque = NO; layer = &lt;CALayer: 0x1704298a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d420dc0; frame = (268 16; 48 44); opaque = NO; layer = &lt;CALayer: 0x170426760&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102770f80; frame = (2 7; 44 30); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17422c700&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d424e50; frame = (4 16; 48 44); opaque = NO; layer = &lt;CALayer: 0x170429c20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4b9eb0; frame = (2 7; 44 30); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635c40&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;NewRoundedRectView: 0x10d4a96a0; frame = (-5 480; 330 90); layer = &lt;CALayer: 0x17062cce0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x1026a2c40; frame = (34 4; 44 44); opaque = NO; layer = &lt;CALayer: 0x170429780&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4e0240; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635bc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d42f130; frame = (86 4; 44 44); opaque = NO; layer = &lt;CALayer: 0x170424520&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4de1b0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635ae0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d404a60; frame = (138 4; 44 44); opaque = NO; layer = &lt;CALayer: 0x170426040&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4dc1d0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635a20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d416000; frame = (190 4; 44 44); opaque = NO; layer = &lt;CALayer: 0x170427220&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4d3830; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706359e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d434c00; frame = (242 4; 44 44); opaque = NO; layer = &lt;CALayer: 0x1704291c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4d58c0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635980&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;MPVolumeView: 0x10d4c7520; frame = (20 56; 240 30); opaque = NO; layer = &lt;CALayer: 0x170632ea0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;MPButton: 0x10d4c80b0; baseClass = UIButton; frame = (218.5 2; 21.5 18); opaque = NO; autoresize = LM+BM; layer = &lt;CALayer: 0x170428480&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4c83e0; frame = (-39.25 -41; 100 100); alpha = 0; opaque = NO; userInteractionEnabled = NO; tag = 1886548836; layer = &lt;CALayer: 0x170631b00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4d1850; frame = (0 0; 21.5 18); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706358e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;MPVolumeSlider: 0x10d4c7920; baseClass = UISlider; frame = (0 -5; 211.5 28); opaque = NO; autoresize = W+BM; layer = &lt;CALayer: 0x17062b6c0&gt;; value: 0.000000&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIView: 0x10d498720; frame = (2 10; 207.5 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635460&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d425ac0; frame = (0 0; 207.5 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635560&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4bc0f0; frame = (2 10; 0 8); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706355c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4be180; frame = (-3 -1; 30 30); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170635620&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4a3210; frame = (276 40; 44 44); opaque = NO; layer = &lt;CALayer: 0x170428180&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1027764c0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17422a9e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4a4cb0; frame = (276 40; 44 44); hidden = YES; opaque = NO; layer = &lt;CALayer: 0x17042b500&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FloatingView: 0x10d4add90; frame = (45 124; 230 160); hidden = YES; layer = &lt;CALayer: 0x170429300&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d41c3a0; frame = (21 4; 50 50); opaque = NO; layer = &lt;CALayer: 0x1704330c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102700650; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17422aa80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d498e60; frame = (91 4; 50 50); opaque = NO; layer = &lt;CALayer: 0x1704249a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102779690; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17423cb20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4ae9f0; frame = (91 56; 50 50); opaque = NO; layer = &lt;CALayer: 0x170432e00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1027b2f20; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x174229f00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4b0900; frame = (21 106; 50 50); opaque = NO; layer = &lt;CALayer: 0x1704328e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026656e0; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170634d20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x102738580; frame = (91 106; 50 50); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x174223f40&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d497630; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170634ba0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4b2960; frame = (161 4; 50 50); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170425a80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d43f260; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170429160&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4b49a0; frame = (161 106; 50 50); opaque = NO; layer = &lt;CALayer: 0x170627b20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4b5500; frame = (0 0; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17042f880&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FloatingView: 0x10d4b67e0; frame = (-5 188; 62 192); layer = &lt;CALayer: 0x170630ae0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4b6d20; frame = (11 3.2; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170633160&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d436ff0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170633ce0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4b7db0; frame = (11 50.4; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x17062e040&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026a9ad0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706337a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4ba170; frame = (11 97.6; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170632760&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d402990; frame = (7 7; 30 30); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706344c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4bc3b0; frame = (11 144.8; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170632c20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102797f20; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x174229de0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;FloatingView: 0x10d4b69a0; frame = (263 188; 62 192); layer = &lt;CALayer: 0x170632880&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4be440; frame = (6 3.2; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170632be0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d44d340; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17062a280&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4c04b0; frame = (6 50.4; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x170629c00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d434ed0; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170632940&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4c2490; frame = (6 97.6; 44 44); opaque = NO; tintColor = UIExtendedGrayColorSpace 1 1; layer = &lt;CALayer: 0x1702377c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10264f740; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170634b00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4c4090; frame = (6 144.8; 44 44); opaque = NO; tintColor = UIExtendedSRGBColorSpace 0.192157 0.760784 0.486275 1; layer = &lt;CALayer: 0x17062e5a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026d5810; frame = (6.5 6.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17062f7c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d4c6020; frame = (0 448; 320 30); text = ''; alpha = 0; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17048ae10&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UILabel: 0x10d4c6b50; frame = (0 284; 320 100); userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17048a780&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;_UILabelContentLayer: 0x1706337c0&gt; (layer)</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;SingleHandRoundedRectView: 0x10d4d9d10; frame = (0 341; 227 227); hidden = YES; layer = &lt;CALayer: 0x170432e80&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4da0e0; frame = (0 0; 227 227); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170432de0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4d5b80; frame = (80 165; 52 52); opaque = NO; layer = &lt;CALayer: 0x170632dc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10268c4f0; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170426d00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4d1b10; frame = (150 160; 52 52); opaque = NO; layer = &lt;CALayer: 0x17062c6a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d40f400; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17062abc0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4cfa80; frame = (105 75; 52 52); opaque = NO; layer = &lt;CALayer: 0x17062b9a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026c59a0; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170432940&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4d3af0; frame = (20 25; 52 52); opaque = NO; layer = &lt;CALayer: 0x170630e20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d416a20; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706315a0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4d7870; frame = (10 95; 52 52); opaque = NO; layer = &lt;CALayer: 0x170433720&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4a5d50; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170629d00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4d9910; frame = (10 170; 52 52); opaque = NO; layer = &lt;CALayer: 0x170633c00&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d403130; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706265c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;SingleHandRoundedRectView: 0x10d4e4690; frame = (93 341; 227 227); hidden = YES; layer = &lt;CALayer: 0x170630000&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4e4860; frame = (0 0; 227 227); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1706273c0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4e0500; frame = (100 165; 52 52); opaque = NO; layer = &lt;CALayer: 0x170424ba0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d4006c0; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170632d60&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4dc490; frame = (25 160; 52 52); opaque = NO; layer = &lt;CALayer: 0x170633100&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102655f40; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170632360&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4da2d0; frame = (75 75; 52 52); opaque = NO; layer = &lt;CALayer: 0x170633180&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026894c0; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17062f220&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4de470; frame = (165 25; 52 52); opaque = NO; layer = &lt;CALayer: 0x170433580&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10266a930; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17042f800&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4e21f0; frame = (165 95; 52 52); opaque = NO; layer = &lt;CALayer: 0x170433920&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d42adc0; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170426c40&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4e4290; frame = (170 170; 52 52); opaque = NO; layer = &lt;CALayer: 0x1704293e0&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x102663010; frame = (10.5 10.5; 31 31); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170426700&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4e4a50; frame = (260 258; 52 52); hidden = YES; opaque = NO; layer = &lt;CALayer: 0x17062eb20&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x10d41df50; frame = (1 1; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x170432820&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIButton: 0x10d4e4d20; frame = (10 258; 52 52); hidden = YES; opaque = NO; layer = &lt;CALayer: 0x17062cf60&gt;&gt;</span></span><br><span class="line"><span class="string">   </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string"> &lt;UIImageView: 0x1026f92a0; frame = (1 1; 50 50); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x1704270e0&gt;&gt;`</span></span><br></pre></td></tr></table></figure><p>这里需要说明的是，<code>[[UIApp keyWindow] recursiveDescription].toString()</code>是查看当前页面的所有view。稍微仔细点的同学就会主要到，每次进入播放界面时，界面上方都有一个banner，内容是<code>Buy the full version to remove ads?</code>.所以简单的方式是，通过搜索关键字查找控件。可得到如下结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;UILabel: <span class="number">0x10271ed60</span>; frame = (<span class="number">60</span> <span class="number">0</span>; <span class="number">260</span> <span class="number">50</span>); <span class="built_in">text</span> = 'Buy <span class="keyword">the</span> full <span class="built_in">version</span> <span class="keyword">to</span> r...'; userInteractionEnabled = NO;</span><br></pre></td></tr></table></figure><p>我们可以在后面进行lldb调试的时候，根据这个为依据进行查找调试。</p><p>5、利用debugserver结合LLDB调试app</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugserver *:<span class="number">1234</span> -<span class="selector-tag">a</span> <span class="string">"OPlayer Lite"</span></span><br></pre></td></tr></table></figure><p>6、新建终端LLDB连接App</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lldb</span><br><span class="line"><span class="built_in">process</span> <span class="built_in">connect</span> <span class="built_in">connect</span>:<span class="comment">//172.20.128.176:1234</span></span><br></pre></td></tr></table></figure><p>7、接下来查看偏移地址</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">image</span> <span class="built_in">list</span> -o -f</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">0</span>] <span class="number">0x000000000005c000</span> /var/containers/Bundle/Application/AAAB1B0F-A9A6<span class="number">-455</span>C-BE5B<span class="number">-8E0230</span>A75252/OPlayer Lite.app/OPlayer Lite(<span class="number">0x000000010005c000</span>)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[  <span class="number">7</span>] <span class="number">0x0000000000350000</span> /Users/weihua/Library/Developer/Xcode/iOS DeviceSupport/<span class="number">10.3</span><span class="number">.1</span> (<span class="number">14E304</span>)/Symbols/System/Library/Frameworks/UIKit.framework/UIKit</span><br></pre></td></tr></table></figure><p>通过hopper v4分析<code>addSubview</code>在UIKit框架的偏移地址：<br>addSubview:0x0000000187775d24</p><p>通过<code>image list -o -f</code>分析UIKit框架在模块中加载的的起始偏移地址：<br>UIKit: 0x0000000000350000</p><p>设置断点：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br s -a <span class="number">0</span>x00000<span class="number">00000350000</span>+<span class="number">0</span>x0000<span class="number">000187775d24</span></span><br></pre></td></tr></table></figure></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">* thread <span class="symbol">#1</span>, queue = 'com.apple.main-thread', stop reason = breakpoint <span class="number">1.1</span></span><br><span class="line">    frame <span class="symbol">#0</span>: <span class="number">0x0000000187ac5d24</span> UIKit`-[UIView(Hierarchy) addSubview:]</span><br><span class="line">UIKit`-[UIView(Hierarchy) addSubview:]:</span><br><span class="line">-&gt;  <span class="number">0x187ac5d24</span> &lt;+<span class="number">0</span>&gt;:  stp    <span class="keyword">x</span><span class="number">24</span>, <span class="keyword">x</span><span class="number">23</span>, [sp, #<span class="number">-0</span><span class="keyword">x</span><span class="number">40</span>]!</span><br><span class="line">    <span class="number">0x187ac5d28</span> &lt;+<span class="number">4</span>&gt;:  stp    <span class="keyword">x</span><span class="number">22</span>, <span class="keyword">x</span><span class="number">21</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">10</span>]</span><br><span class="line">    <span class="number">0x187ac5d2c</span> &lt;+<span class="number">8</span>&gt;:  stp    <span class="keyword">x</span><span class="number">20</span>, <span class="keyword">x</span><span class="number">19</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">20</span>]</span><br><span class="line">    <span class="number">0x187ac5d30</span> &lt;+<span class="number">12</span>&gt;: stp    <span class="keyword">x</span><span class="number">29</span>, <span class="keyword">x</span><span class="number">30</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">30</span>]</span><br><span class="line">Target <span class="number">0</span>: (OPlayer Lite) stopped.</span><br><span class="line">(lldb) po $<span class="keyword">x</span><span class="number">2</span></span><br><span class="line">&lt;PlayerView: <span class="number">0x1027f27d0</span><span class="comment">; frame = (0 0; 568 320); layer = &lt;CAEAGLLayer: 0x1704298c0&gt;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(lldb) c</span></span><br><span class="line"><span class="comment">Process 432 resuming</span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac5d24 UIKit`-[UIView(Hierarchy) addSubview:]</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac5d24 &lt;+0&gt;:  stp    x24, x23, [sp, #-0x40]!</span></span><br><span class="line"><span class="comment">    0x187ac5d28 &lt;+4&gt;:  stp    x22, x21, [sp, #0x10]</span></span><br><span class="line"><span class="comment">    0x187ac5d2c &lt;+8&gt;:  stp    x20, x19, [sp, #0x20]</span></span><br><span class="line"><span class="comment">    0x187ac5d30 &lt;+12&gt;: stp    x29, x30, [sp, #0x30]</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb) po $x2</span></span><br><span class="line"><span class="comment">&lt;UIView: 0x1027f32a0; frame = (0 0; 568 320); layer = &lt;CALayer: 0x17042dc40&gt;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(lldb) po $x2</span></span><br><span class="line"><span class="comment">&lt;UILayoutContainerView: 0x1027700d0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x1702374e0&gt;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(lldb) c</span></span><br><span class="line"><span class="comment">Process 432 resuming</span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac5d24 UIKit`-[UIView(Hierarchy) addSubview:]</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac5d24 &lt;+0&gt;:  stp    x24, x23, [sp, #-0x40]!</span></span><br><span class="line"><span class="comment">    0x187ac5d28 &lt;+4&gt;:  stp    x22, x21, [sp, #0x10]</span></span><br><span class="line"><span class="comment">    0x187ac5d2c &lt;+8&gt;:  stp    x20, x19, [sp, #0x20]</span></span><br><span class="line"><span class="comment">    0x187ac5d30 &lt;+12&gt;: stp    x29, x30, [sp, #0x30]</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb) po $x2</span></span><br><span class="line"><span class="comment">&lt;UIButton: 0x10f23eb00; frame = (0 0; 320 50); opaque = NO; layer = &lt;CALayer: 0x17042e180&gt;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(lldb) c</span></span><br><span class="line"><span class="comment">Process 432 resuming</span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac5d24 UIKit`-[UIView(Hierarchy) addSubview:]</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac5d24 &lt;+0&gt;:  stp    x24, x23, [sp, #-0x40]!</span></span><br><span class="line"><span class="comment">    0x187ac5d28 &lt;+4&gt;:  stp    x22, x21, [sp, #0x10]</span></span><br><span class="line"><span class="comment">    0x187ac5d2c &lt;+8&gt;:  stp    x20, x19, [sp, #0x20]</span></span><br><span class="line"><span class="comment">    0x187ac5d30 &lt;+12&gt;: stp    x29, x30, [sp, #0x30]</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb) po $x2</span></span><br><span class="line"><span class="comment">&lt;UILabel: 0x10f2009b0; frame = (60 0; 260 50); text = 'Buy the full version to r...'; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17028bc70&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>到此为止找到了相关控件，然后通过<code>ni</code>命令往回追溯目标模块调用时的起始地址。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">(lldb) ni</span><br><span class="line">Process <span class="number">432</span> stopped</span><br><span class="line">* thread <span class="symbol">#1</span>, queue = 'com.apple.main-thread', stop reason = instruction step over</span><br><span class="line">    frame <span class="symbol">#0</span>: <span class="number">0x0000000187ac5d28</span> UIKit`-[UIView(Hierarchy) addSubview:] + <span class="number">4</span></span><br><span class="line">UIKit`-[UIView(Hierarchy) addSubview:]:</span><br><span class="line">-&gt;  <span class="number">0x187ac5d28</span> &lt;+<span class="number">4</span>&gt;:  stp    <span class="keyword">x</span><span class="number">22</span>, <span class="keyword">x</span><span class="number">21</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">10</span>]</span><br><span class="line">    <span class="number">0x187ac5d2c</span> &lt;+<span class="number">8</span>&gt;:  stp    <span class="keyword">x</span><span class="number">20</span>, <span class="keyword">x</span><span class="number">19</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">20</span>]</span><br><span class="line">    <span class="number">0x187ac5d30</span> &lt;+<span class="number">12</span>&gt;: stp    <span class="keyword">x</span><span class="number">29</span>, <span class="keyword">x</span><span class="number">30</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">30</span>]</span><br><span class="line">    <span class="number">0x187ac5d34</span> &lt;+<span class="number">16</span>&gt;: <span class="keyword">add</span>    <span class="keyword">x</span><span class="number">29</span>, sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">30</span>            <span class="comment">; =0x30 </span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb)  </span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac5d2c UIKit`-[UIView(Hierarchy) addSubview:] + 8</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac5d2c &lt;+8&gt;:  stp    x20, x19, [sp, #0x20]</span></span><br><span class="line"><span class="comment">    0x187ac5d30 &lt;+12&gt;: stp    x29, x30, [sp, #0x30]</span></span><br><span class="line"><span class="comment">    0x187ac5d34 &lt;+16&gt;: add    x29, sp, #0x30            ; =0x30 </span></span><br><span class="line"><span class="comment">    0x187ac5d38 &lt;+20&gt;: mov    x20, x0</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb)  </span></span><br><span class="line"><span class="comment">(lldb) </span></span><br><span class="line"><span class="comment">error: invalid thread</span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac5d30 UIKit`-[UIView(Hierarchy) addSubview:] + 12</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac5d30 &lt;+12&gt;: stp    x29, x30, [sp, #0x30]</span></span><br><span class="line"><span class="comment">    0x187ac5d34 &lt;+16&gt;: add    x29, sp, #0x30            ; =0x30 </span></span><br><span class="line"><span class="comment">    0x187ac5d38 &lt;+20&gt;: mov    x20, x0</span></span><br><span class="line"><span class="comment">    0x187ac5d3c &lt;+24&gt;: mov    x0, x2</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb)  </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> ........</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over</span></span><br><span class="line"><span class="comment">    frame #0: 0x0000000187ac6074 UIKit`-[UIView(Hierarchy) addSubview:] + 848</span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Hierarchy) addSubview:]:</span></span><br><span class="line"><span class="comment">-&gt;  0x187ac6074 &lt;+848&gt;: b      0x180414250               ; objc_release</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:]:</span></span><br><span class="line"><span class="comment">    0x187ac6078 &lt;+0&gt;:   stp    x28, x27, [sp, #-0x60]!</span></span><br><span class="line"><span class="comment">    0x187ac607c &lt;+4&gt;:   stp    x26, x25, [sp, #0x10]</span></span><br><span class="line"><span class="comment">    0x187ac6080 &lt;+8&gt;:   stp    x24, x23, [sp, #0x20]</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb)  </span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over</span></span><br><span class="line"><span class="comment">    frame #0: 0x00000001003d01f8 OPlayer Lite`_mh_execute_header + 3621368</span></span><br><span class="line"><span class="comment">OPlayer Lite`_mh_execute_header:</span></span><br><span class="line"><span class="comment">-&gt;  0x1003d01f8 &lt;+3621368&gt;: adrp   x8, 5089</span></span><br><span class="line"><span class="comment">    0x1003d01fc &lt;+3621372&gt;: ldr    x20, [x8, #0x630]</span></span><br><span class="line"><span class="comment">    0x1003d0200 &lt;+3621376&gt;: mov    x0, x19</span></span><br><span class="line"><span class="comment">    0x1003d0204 &lt;+3621380&gt;: mov    x1, x20</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br><span class="line"><span class="comment">(lldb)  </span></span><br><span class="line"><span class="comment">Process 432 stopped</span></span><br><span class="line"><span class="comment">* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step over</span></span><br><span class="line"><span class="comment">    frame #0: 0x00000001003d01fc OPlayer Lite`_mh_execute_header + 3621372</span></span><br><span class="line"><span class="comment">OPlayer Lite`_mh_execute_header:</span></span><br><span class="line"><span class="comment">-&gt;  0x1003d01fc &lt;+3621372&gt;: ldr    x20, [x8, #0x630]</span></span><br><span class="line"><span class="comment">    0x1003d0200 &lt;+3621376&gt;: mov    x0, x19</span></span><br><span class="line"><span class="comment">    0x1003d0204 &lt;+3621380&gt;: mov    x1, x20</span></span><br><span class="line"><span class="comment">    0x1003d0208 &lt;+3621384&gt;: bl     0x10106f28c               ; symbol stub for: objc_msgSend</span></span><br><span class="line"><span class="comment">Target 0: (OPlayer Lite) stopped.</span></span><br></pre></td></tr></table></figure><p>由结果看来，<code>OPlayer Lite</code>模块起始基地址为<code>0x1003d01f8</code>，<br>然后通过减去<code>OPlayer Lite</code>偏移地址<code>0x000000000005c000</code>,</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x <span class="number">0x1003d01f8</span><span class="number">-0x000000000005c000</span></span><br><span class="line">(long) $<span class="number">74</span> = <span class="number">0x00000001003741f8</span></span><br></pre></td></tr></table></figure><p>然后把<code>0x00000001003741f8</code>放入已经打开的Hopper Disassembler v4中，用快捷键<code>G</code>进行查找，结果如下：<br><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/001.png" alt="01.png"></p><p>这里我们进行更加结果进行猜测，<code>addAds_OnLocalAds</code>很有可能是我们需要查找的结果。接下来，我们对其进行进行断点调试，先找到<code>addAds_OnLocalAds</code>的地址：</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/002.png" alt="02.png"></p><p>地址为：<code>0x000000010037c518</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x <span class="number">0x000000010037c518</span>+<span class="number">0x000000000005c000</span></span><br><span class="line">(long) $<span class="number">76</span> = <span class="number">0x00000001003d8518</span></span><br></pre></td></tr></table></figure><p>可能此时设备卡顿不动，继续运行,并且移除所有命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="keyword">c</span></span><br><span class="line">Process <span class="number">432</span> resuming</span><br><span class="line">(lldb) <span class="keyword">br</span> del</span><br><span class="line">About <span class="keyword">to</span> <span class="keyword">delete</span> <span class="keyword">all</span> breakpoints, <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span> that?: [Y/n] <span class="keyword">y</span></span><br><span class="line">All breakpoints removed. (<span class="number">1</span> breakpoint)</span><br></pre></td></tr></table></figure><p>重新设置断点,即<code>addAds_OnLocalAds</code>处设置断点：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br s -<span class="selector-tag">a</span> <span class="number">0</span>x00000001003d8518</span><br></pre></td></tr></table></figure><p>然后返回上一界面，重新播放视频，此时命令行输出：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* thread <span class="symbol">#1</span>, queue = 'com.apple.main-thread', stop reason = breakpoint <span class="number">2.1</span></span><br><span class="line">    frame <span class="symbol">#0</span>: <span class="number">0x00000001003d8518</span> OPlayer Lite`_mh_execute_header + <span class="number">3654936</span></span><br><span class="line">OPlayer Lite`_mh_execute_header:</span><br><span class="line">-&gt;  <span class="number">0x1003d8518</span> &lt;+<span class="number">3654936</span>&gt;: stp    d<span class="number">9</span>, d<span class="number">8</span>, [sp, #<span class="number">-0</span><span class="keyword">x</span><span class="number">50</span>]!</span><br><span class="line">    <span class="number">0x1003d851c</span> &lt;+<span class="number">3654940</span>&gt;: stp    <span class="keyword">x</span><span class="number">24</span>, <span class="keyword">x</span><span class="number">23</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">10</span>]</span><br><span class="line">    <span class="number">0x1003d8520</span> &lt;+<span class="number">3654944</span>&gt;: stp    <span class="keyword">x</span><span class="number">22</span>, <span class="keyword">x</span><span class="number">21</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">20</span>]</span><br><span class="line">    <span class="number">0x1003d8524</span> &lt;+<span class="number">3654948</span>&gt;: stp    <span class="keyword">x</span><span class="number">20</span>, <span class="keyword">x</span><span class="number">19</span>, [sp, <span class="symbol">#0</span><span class="keyword">x</span><span class="number">30</span>]</span><br><span class="line">Target <span class="number">0</span>: (OPlayer Lite) stopped.</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>接下来获取名称及地址：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p (<span class="keyword">char</span>*)<span class="variable">$x1</span></span><br><span class="line">(<span class="keyword">char</span> *) <span class="variable">$78</span> = 0x0000000101454c97 <span class="string">"addAds_OnLocalAds"</span></span><br></pre></td></tr></table></figure><p>方法执行完以后应该返回的地址</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x $lr</span><br><span class="line">(unsigned long) $<span class="number">83</span> = <span class="number">0x00000001003d01f8</span></span><br><span class="line">(lldb) p/x <span class="number">0x00000001003d01f8</span><span class="number">-0x000000000005c000</span></span><br><span class="line">(long) $<span class="number">84</span> = <span class="number">0x00000001003741f8</span></span><br></pre></td></tr></table></figure><p><code>0x00000001003741f8</code>是我们需要的地址，根据这个地址可以在Hopper V4中进行跳转：</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/003.png" alt="03.png"></p><p>在上图中，找了方法<code>addAds_OnLocalAds</code>方法，说明位置正确，然后根据汇编指令<code>cbnz</code>,可知这一处是一个判断语句。</p><p>最关键的信息是，我们还看到了在一个”PlayViewController”控制器中存在一个’localAdView’的成员变量。</p><p>同时继续往上继续查找，可以找到该方法是在<code>[PlayViewController viewWillAppear:]</code>中调用的，如下图：<br><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/004.png" alt="04.png"></p><p>接下来，我们进行确认。</p><p>通过<code>class-dump</code>的方式获取头文件。这里不说具体原因了，命令如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>-<span class="title">dump</span> <span class="title">OPlayer_Lite</span>.<span class="title">decrypted</span> -<span class="title">H</span> -<span class="title">o</span> <span class="title">header</span></span></span><br></pre></td></tr></table></figure><p>然后在header文件夹中可以进行确认。</p><p>OK，到此为止，我们已经找到了 广告加载的界面的了。我们需要通过工程来进行最后的实现。</p><h3 id="三、MonkeyDev调试定位"><a href="#三、MonkeyDev调试定位" class="headerlink" title="三、MonkeyDev调试定位"></a>三、MonkeyDev调试定位</h3><p>这里为了简单，我采用了MonkeyDev来实现，当然也可以通过 Theos 的方式，笔者亲测成功！！！</p><p>关于如何安装MonkeyDev，请移步<a href="https://github.com/AloneMonkey/MonkeyDev/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">MonkeyDev安装教程及简介</a>。</p><p>需要说明的是，MonkeyDev的好处就是能通过界面调试app，定位控件，当然如果安装了Reveal那就更加简单，iOS上面的界面调试神器。但是<br>MonkeyDev需要已经破解了ipa，这里可以通过<code>Window上的PP助手</code>获取。</p><p>首先新建工程，命名<code>Oplayerlite</code>.其它的也不多了，直接贴关键代码。</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/005.png" alt="07.png"></p><p>然后运行工程，发现之前的 ‘Buy the full version to remove ads?’ 相关的UIView已经没了，但是又出现了新的广告，以下截图来自Reveal，Xcode也可以。</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/006.png" alt="08.png"></p><p>然后在<code>PlayViewController</code>中找到了相关的调用<code>GADBannerView *gAdView;</code>,然后通过头文件查找<code>GADBannerView</code>,结果找到了如下调用函数：</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/007.png" alt="09.png"></p><p>此时抱着怀疑的态度试了修改工程中<code>OplayerliteDylib.xm</code>内容如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See http://iphonedevwiki.net/index.php/Logos</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *localAdView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">%hook PlayViewController</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.localAdView = [[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">    %orig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%hook GADBannerView</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFrame:(<span class="keyword">struct</span> <span class="built_in">CGRect</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"__%s__"</span>,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>然后run一下，结果居然成功了。</p><p>OK，恭喜，到此为止真的实现了Oplayer lite播放时移除广告的功能。</p><h3 id="四、打包安装App至非越狱"><a href="#四、打包安装App至非越狱" class="headerlink" title="四、打包安装App至非越狱"></a>四、打包安装App至非越狱</h3><p>后面，我想这如何将此app安装的到非越狱的设备上。</p><p><img src="/2018/08/06/iOS逆向之移除Oplayer-lite广告/008.png" alt="10.png"></p><p>将此app进行到处，放入Payload文件中压缩，重命名为.ipa的文件。此时可能还无法进行安装，需要最后一步操作，进行ipa重签名。<br>具体请参考<a href="https://www.jianshu.com/p/f46f94983880" target="_blank" rel="noopener">iOS重签名操作</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发之上线AppStore流程</title>
      <link href="/2018/06/07/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%8A%E7%BA%BFAppStore%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/06/07/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%8A%E7%BA%BFAppStore%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>作为一个iOS开发者，不仅仅是能够写出优美的代码。最终的我们的目的是能我们的项目上线，就显示十分完美了。</p><p>由于每次上线或多或少的都会有细节无法注意到。现在就以公司某个项目上线为基础。详细描述关于iOS上线的流程。</p><p>一般分为三个部分：BundleID申请、发布证书申请、提交审核。</p><h3 id="一、BundleID申请"><a href="#一、BundleID申请" class="headerlink" title="一、BundleID申请"></a>一、BundleID申请</h3><p>公司一般都是多人开发，为了方便测试，在开发阶段使用企业版账号进行项目开发。在开发完成后需要进行app store 上架，这里可以通过更新项目的buildID来实现。通过测试可知，用两种方式可实现更新：</p><ul><li>直接更换成新的bundleID；</li><li>将企业版账号下的bundleID进行删除，然后在个人开发者账号再次创建。</li></ul><h5 id="创建步骤如下："><a href="#创建步骤如下：" class="headerlink" title="创建步骤如下："></a>创建步骤如下：</h5><p>1、登陆<a href="https://developer.apple.com/account" target="_blank" rel="noopener">https://developer.apple.com/account</a>，进入如下界面<br>    <img src="/2018/06/07/iOS开发之上线AppStore流程/1-01.png" alt="img"></p><p>2、点击证书描述文件管理，进入如下界面<br>    <img src="/2018/06/07/iOS开发之上线AppStore流程/1-02.png" alt="img"></p><p>3、接下点击上图中的“+”即可进行bundleID的创建，这里以<code>com.xxxxxx.testApp</code>为例<br>    <img src="/2018/06/07/iOS开发之上线AppStore流程/1-03.png" alt="img"></p><p>4、点击<code>continue</code>，跳转下一界面，如下：<br>    <img src="/2018/06/07/iOS开发之上线AppStore流程/1-04.png" alt="img"></p><p>5、点击上图<code>Register</code>按钮，跳转下一界面，如下：<br>    <img src="/2018/06/07/iOS开发之上线AppStore流程/1-05.png" alt="img"></p><p>6、点击上图<code>Done</code>按钮，表示已经完成新的bundleID创建。</p><h3 id="二、发布证书申请"><a href="#二、发布证书申请" class="headerlink" title="二、发布证书申请"></a>二、发布证书申请</h3><p>在申请发布证书之前，我们需要进行<code>CertificateSigningRequest</code>创建，因为后续在进行发布证书申请时需要。</p><p>1、在Mac上搜索<code>钥匙串访问</code>即可，然后按下图所示，进行创建。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-01.png" alt="img"></p><p>2、出现如下界面时，需要将信息填写完整。需要注意的是，前面三个选项可以任意填写，但是最后一个选项<code>请求是</code>必须选择<code>存储到磁盘</code>。点击<code>继续</code>后，可将证书存储到桌面，此时桌面可看见<code>CertificateSigningRequest.certSigningRequest</code>的文件。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-02.png" alt="img"></p><p>3、回到苹果个人开发者网站上，点击<code>Provisioning Profiles</code>下<code>Distribution</code>，结果如下：<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-03.png" alt="img"></p><p>4、点击上图<code>+</code>按钮，出现如下界面，需要进行发布证书类型的选择，这里直接选择<code>App Store</code>，意味着我们需要申请的是AppStore发布证书，然后点击<code>Continue</code><br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-04.png" alt="img"></p><p>5、接下来需要进行bundleID的绑定，此处应与第一部分中的第三小步中创建的bunldeid保持一致。(此处因示例原因，未保持一致)<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-05.png" alt="img"></p><p>6、点击上图中<code>Continue</code>后，出现如下界面，进行签名证书的选择<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-0601.png" alt="img"></p><p>需要注意的是：<br>此步骤可能出现另外一种情况，可能不存在选项，需要创建签名证书，此时这需要用到第1、2步中说创建的<code>CertificateSigningRequest</code>证书了。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-0602.png" alt="img"></p><p>7、接下来，添加证书生成后的文件名称。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-07.png" alt="img"></p><p>8、点击继续后即可进入下一个界面，点击<code>Download</code>，完成证书下载。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-08.png" alt="img"></p><p>9、最后进入下载文件夹，找到刚刚生成的发布证书，并双击，将证书加入<code>钥匙串访问</code>中。<br><img src="/2018/06/07/iOS开发之上线AppStore流程/2-09.png" alt="img"></p><h3 id="三、提交审核"><a href="#三、提交审核" class="headerlink" title="三、提交审核"></a>三、提交审核</h3><p>终于来到了最后的提交审核阶段阶段。其中为了更完整的完整的描述此部分的操作详情，将操作分为三个阶段：</p><ul><li>在App Store Contect上先创建应用，必将应用信息填写完整；</li><li>完成工程项目的打包任务，并选择上传至AppStore平台；</li><li>将上传的iPa包与创建的应用进行绑定，并提交审核。</li></ul><h5 id="1、在App-Store-Connect上先创建应用，必将应用信息填写完整"><a href="#1、在App-Store-Connect上先创建应用，必将应用信息填写完整" class="headerlink" title="1、在App Store Connect上先创建应用，必将应用信息填写完整"></a>1、在App Store Connect上先创建应用，必将应用信息填写完整</h5><p>(1)开始创建应用<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-0101.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-0102.png" alt="img"></p><p>(2)填写应用名称，选择目标bundleID<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-02.png" alt="img"></p><p>(3)填写应用信息<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-03.png" alt="img"></p><p>(4)更新app价格与销售范围<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-04.png" alt="img"></p><p>(5)在准备提交选项内继续完善信息填写<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-05.png" alt="img"></p><h5 id="2、完成工程项目的打包任务，并选择上传至AppStore平台"><a href="#2、完成工程项目的打包任务，并选择上传至AppStore平台" class="headerlink" title="2、完成工程项目的打包任务，并选择上传至AppStore平台"></a>2、完成工程项目的打包任务，并选择上传至AppStore平台</h5><p>(1)打开Xcode，然后选择账号，开始进行Arachive，操作步骤如下<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-06.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-07.png" alt="img"></p><p>(2)接下来，进行上传ipa的操作，如下所示<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-08.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-09.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-10.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-11.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-12.png" alt="img"></p><hr><p>需要注意的是：</p><p>一般在进行这一步时，苹果会进行ipa的初步检测，包括权限控制、icon、luanch图片使用的合法性!</p><hr><p>当上传没有问题后，最后会出现如下结果!<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-13.png" alt="img"></p><p>至此为止，完成ipa上传流程!!!</p><h5 id="3、将上传的iPa包与创建的应用进行绑定，并提交审核"><a href="#3、将上传的iPa包与创建的应用进行绑定，并提交审核" class="headerlink" title="3、将上传的iPa包与创建的应用进行绑定，并提交审核"></a>3、将上传的iPa包与创建的应用进行绑定，并提交审核</h5><p>(1)打开App Store Contect，在<code>准备提交</code>选项中，找到<code>构建版本</code>，选择刚刚上传的版本记录<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-14.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-15.png" alt="img"></p><p>(2)点击<code>存储</code>，然后完成接下来的提交流程<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-16.png" alt="img"><br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-17.png" alt="img"><br>点击上图中<code>提交</code>按钮，完成提交流程</p><p>(3)完成提交流程后，会自动跳转如下界面，至此已完成整个iOS上架打包流程<br><img src="/2018/06/07/iOS开发之上线AppStore流程/3-18.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> AppStore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上搭建Hexo的Github个人博客</title>
      <link href="/2016/03/21/Mac%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E7%9A%84Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2016/03/21/Mac%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E7%9A%84Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>作为一个NB的程序员，必须要有一个属于自己的blog。<br>市面上大多数人常有的blog网站有<a href="https://bbs.csdn.net/forums/ios" target="_blank" rel="noopener"><code>CSDN</code></a>、<a href="https://juejin.im/welcome/ios" target="_blank" rel="noopener"><code>掘金</code></a>、<a href="https://juejin.im/welcome/ios" target="_blank" rel="noopener"><code>我是开发者</code></a>、<a href="https://www.oschina.net/ios/codingList" target="_blank" rel="noopener"><code>oschina</code></a>、<a href="http://www.cocoachina.com/" target="_blank" rel="noopener"><code>cocoachina</code></a>、<a href="https://www.jianshu.com/" target="_blank" rel="noopener"><code>简书</code></a>。</p><h3 id="一、Node、npm、git环境安装"><a href="#一、Node、npm、git环境安装" class="headerlink" title="一、Node、npm、git环境安装"></a>一、Node、npm、git环境安装</h3><p>因为大多数程序员Mac电脑都支持或已经具备基本。本教程不做Nodejs、git环境的安装，如未安装，请自行百度。仅做简单的验证操作：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">v10.<span class="number">8.0</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="selector-tag">npm</span> <span class="selector-tag">-v</span></span><br><span class="line">6<span class="selector-class">.2</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ git --version</span><br><span class="line">git version <span class="number">2.17</span><span class="number">.2</span> (Apple Git<span class="number">-113</span>)</span><br></pre></td></tr></table></figure><h3 id="二、Hexo配置"><a href="#二、Hexo配置" class="headerlink" title="二、Hexo配置"></a>二、Hexo配置</h3><p>关于Hexo：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a></p><p>安装部署命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-cli -g</span><br><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span><span class="keyword">install</span></span><br><span class="line"><span class="keyword">hexo </span>server</span><br></pre></td></tr></table></figure><p>安装完成后如何新建Blog？</p><h5 id="1、新建文件夹MyGithubBlog，即项目名，用于放资源"><a href="#1、新建文件夹MyGithubBlog，即项目名，用于放资源" class="headerlink" title="1、新建文件夹MyGithubBlog，即项目名，用于放资源"></a>1、新建文件夹<code>MyGithubBlog</code>，即项目名，用于放资源</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyProject gi<span class="variable">t:</span>(master) ✗ <span class="built_in">mkdir</span> MyGithubBlog</span><br></pre></td></tr></table></figure><h5 id="2、进入文件夹中，并进行初始化工作"><a href="#2、进入文件夹中，并进行初始化工作" class="headerlink" title="2、进入文件夹中，并进行初始化工作"></a>2、进入文件夹中，并进行初始化工作</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  MyProject gi<span class="variable">t:</span>(master) ✗ <span class="keyword">cd</span> MyGithubBlog </span><br><span class="line">➜  MyGithubBlog gi<span class="variable">t:</span>(master) ✗ hexo init</span><br></pre></td></tr></table></figure><p>进度如下：<br><img src="/2016/03/21/Mac上搭建Hexo的Github个人博客/001.jpg" alt></p><h5 id="3、基础插件配置"><a href="#3、基础插件配置" class="headerlink" title="3、基础插件配置"></a>3、基础插件配置</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✗ hexo <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h5 id="4、开始本地服务"><a href="#4、开始本地服务" class="headerlink" title="4、开始本地服务"></a>4、开始本地服务</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  MyGithubBlog <span class="string">git:</span>(master) ✗ hexo g      </span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">134</span> ms</span><br><span class="line">INFO  <span class="string">Generated:</span> index.html</span><br><span class="line">INFO  <span class="string">Generated:</span> archives/index.html</span><br><span class="line">INFO  <span class="string">Generated:</span> <span class="number">2019</span><span class="regexp">/03/</span><span class="number">21</span><span class="regexp">/hello-world/</span>index.html</span><br><span class="line">INFO  <span class="string">Generated:</span> archives<span class="regexp">/2019/</span>index.html</span><br><span class="line">INFO  <span class="string">Generated:</span> archives<span class="regexp">/2019/</span><span class="number">03</span>/index.html</span><br><span class="line">INFO  <span class="number">5</span> files generated <span class="keyword">in</span> <span class="number">195</span> ms</span><br><span class="line">➜  MyGithubBlog <span class="string">git:</span>(master) ✗ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at <span class="string">http:</span><span class="comment">//localhost:4000 . Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><h5 id="5、访问http-localhost-4000，可以出现如下页面"><a href="#5、访问http-localhost-4000，可以出现如下页面" class="headerlink" title="5、访问http://localhost:4000，可以出现如下页面"></a>5、访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，可以出现如下页面</h5><p><img src="/2016/03/21/Mac上搭建Hexo的Github个人博客/002.jpg" alt></p><h3 id="三、使用github-pages"><a href="#三、使用github-pages" class="headerlink" title="三、使用github pages"></a>三、使用github pages</h3><p>github pages是给开发者建立一个私人页面，免费且没有空间流量限制。每个github账号都可以创建一个github pages项目。</p><h5 id="1、创建github-pages项目"><a href="#1、创建github-pages项目" class="headerlink" title="1、创建github pages项目"></a>1、创建github pages项目</h5><p>在github上新建一个项目，项目的名称必须是（你的用户名.github.io)才行</p><p><img src="/2016/03/21/Mac上搭建Hexo的Github个人博客/003.jpg" alt></p><h5 id="2、配置git信息-方便hexo和github通过ssh通信"><a href="#2、配置git信息-方便hexo和github通过ssh通信" class="headerlink" title="2、配置git信息(方便hexo和github通过ssh通信)"></a>2、配置git信息(方便hexo和github通过ssh通信)</h5><p>如何配置，公司使用过gitlab或常用Coding的童鞋应该知道，不再废话，属于基本操作。</p><h3 id="四、配置Deployment"><a href="#四、配置Deployment" class="headerlink" title="四、配置Deployment"></a>四、配置Deployment</h3><p>在MyGithubBlog项目根目录下里找到_config.yml文件，找到Deployment，然后按照如下修改：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git </span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:<span class="number">1019459067</span>/<span class="number">1019459067.</span>github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><h3 id="五、安装-hexo-deployer-git自动部署发布工具"><a href="#五、安装-hexo-deployer-git自动部署发布工具" class="headerlink" title="五、安装 hexo-deployer-git自动部署发布工具"></a>五、安装 hexo-deployer-git自动部署发布工具</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> audit fix</span><br></pre></td></tr></table></figure><h3 id="六、生成静态文件部署到github"><a href="#六、生成静态文件部署到github" class="headerlink" title="六、生成静态文件部署到github"></a>六、生成静态文件部署到github</h3><p>通过命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d，发布到github</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  MyGithubBlog git:(<span class="literal">master</span>) ✗ hexo clean</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  MyGithubBlog git:(<span class="literal">master</span>) ✗ hexo g</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  MyGithubBlog git:(<span class="literal">master</span>) ✗ hexo d</span><br></pre></td></tr></table></figure><p>通过链接就可以进行访问：<a href="https://1019459067.github.io/" target="_blank" rel="noopener">https://1019459067.github.io</a></p><h3 id="七、更改模板，发布博客"><a href="#七、更改模板，发布博客" class="headerlink" title="七、更改模板，发布博客"></a>七、更改模板，发布博客</h3><p><a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">next主题</a></p><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">hexo写作教程</a></p><h3 id="八、Hexo中添加本地图片"><a href="#八、Hexo中添加本地图片" class="headerlink" title="八、Hexo中添加本地图片"></a>八、Hexo中添加本地图片</h3><p>1、把主页配置文件<code>_config.yml</code>里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p><p>2、在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p><p>3、等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹</p><p>4、最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">你想输入的替代文字</span>](<span class="link">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><p>5、最后检查一下，<code>hexo g</code>生成页面后，进入<code>public\2019\03\21\index.html</code>文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p><h3 id="九、为hexo和next增加站内搜索功能"><a href="#九、为hexo和next增加站内搜索功能" class="headerlink" title="九、为hexo和next增加站内搜索功能"></a>九、为hexo和next增加站内搜索功能</h3><h5 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb</span><br></pre></td></tr></table></figure><h5 id="2、修改hexo配置"><a href="#2、修改hexo配置" class="headerlink" title="2、修改hexo配置"></a>2、修改hexo配置</h5><p>在你的hexo目录下的_config.yml中增加如下配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>配置上之后，其实搜索已经配置完成了，但现在我们还看不到搜索的入口，接下来我们需要在next的主体上进行配置</p><h5 id="3、配置next中的搜索入口"><a href="#3、配置next中的搜索入口" class="headerlink" title="3、配置next中的搜索入口"></a>3、配置next中的搜索入口</h5><p>打开themes\next_config.yml，打开local search:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">Local</span> <span class="keyword">search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # <span class="keyword">if</span> auto, trigger <span class="keyword">search</span> <span class="keyword">by</span> changing <span class="keyword">input</span></span><br><span class="line">  # <span class="keyword">if</span> manual, trigger <span class="keyword">search</span> <span class="keyword">by</span> pressing enter key or <span class="keyword">search</span> button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top <span class="keyword">n</span> results per article, show all results <span class="keyword">by</span> setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h5 id="4、接下来就重新运行就可以看到效果。"><a href="#4、接下来就重新运行就可以看到效果。" class="headerlink" title="4、接下来就重新运行就可以看到效果。"></a>4、接下来就重新运行就可以看到效果。</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
